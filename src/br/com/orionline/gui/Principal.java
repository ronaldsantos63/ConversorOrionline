/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.orionline.gui;

import br.com.orionline.bin.GravaTexto;
import br.com.orionline.controllers.ConectaBanco;
import br.com.orionline.entidade.BarrasRelacionadas;
import br.com.orionline.entidade.Clientes;
import br.com.orionline.entidade.ContaReceberAberta;
import br.com.orionline.entidade.ContaReceberCabecalho;
import br.com.orionline.entidade.ContaReceberPaga;
import br.com.orionline.entidade.Estoque;
import br.com.orionline.entidade.Fornecedor;
import br.com.orionline.entidade.Grupo;
import br.com.orionline.entidade.ImpostoFederal;
import br.com.orionline.entidade.ImpostoFederalProduto;
import br.com.orionline.entidade.Produto;
import br.com.orionline.entidade.ProdutoAUX;
import br.com.orionline.entidade.ProdutoFornecedor;
import br.com.orionline.entidade.Secao;
import br.com.orionline.entidade.SubGrupo;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;
import org.jdesktop.swingx.JXErrorPane;
import org.jdesktop.swingx.error.ErrorInfo;

/**
 *
 * @author ronald
 */
public class Principal extends javax.swing.JFrame {

    private static final Logger logger = Logger.getLogger(Principal.class);
    ConectaBanco cx;
    ConectaBanco cx2;
    ConectaBanco cx3;
    ConectaBanco cx4;
    ProdutoAUX prodAuxArq;
    BarrasRelacionadas barrasArq;
    Produto prodArq;
    ProdutoFornecedor prodFornecArq;
    Estoque estoqueArq;
    Secao secaoArq;
    Grupo grupoArq;
    SubGrupo subgrupoArq;
    Fornecedor fornecedorArq;
    Clientes cli;
    ImpostoFederalProduto impFedProdArq;
    ImpostoFederalProduto impFedProdArq2;
    ImpostoFederal impFedArq;
    ContaReceberCabecalho contrecCab;
    ContaReceberAberta contrecarq;
    ContaReceberPaga contrecPag;

    int total = 0;
    int regAtual = 0;

    /**
     * Creates new form Principal
     */
    public Principal() {
        logger.debug("Carregando componentes da janela principal...");
        initComponents();
        logger.debug("Componentes da janela principal carregados com sucesso!");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        checkProdutos = new javax.swing.JCheckBox();
        checkCodBarras = new javax.swing.JCheckBox();
        checkEstoque = new javax.swing.JCheckBox();
        checkFornecedor = new javax.swing.JCheckBox();
        checkSecao = new javax.swing.JCheckBox();
        checkGrupo = new javax.swing.JCheckBox();
        checkSubGrupo = new javax.swing.JCheckBox();
        checkItensFornecedor = new javax.swing.JCheckBox();
        checkTodos = new javax.swing.JCheckBox();
        checkClientes = new javax.swing.JCheckBox();
        checkContaReceber = new javax.swing.JCheckBox();
        checkImpFedProd = new javax.swing.JCheckBox();
        checkImpostoFederal = new javax.swing.JCheckBox();
        checkSecaoGeral = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        btnSair = new javax.swing.JButton();
        btnSobre = new javax.swing.JButton();
        btnExportar = new javax.swing.JButton();
        JProgresso = new javax.swing.JProgressBar();
        lbProcesso = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OrionLine Automação Comercial");
        setResizable(false);

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(null, java.awt.Color.lightGray), "Opçoes"));

        checkProdutos.setText("Produtos");
        checkProdutos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        checkCodBarras.setText("Cod Barras");
        checkCodBarras.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        checkEstoque.setText("Estoque");
        checkEstoque.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        checkFornecedor.setText("Fornecedor");
        checkFornecedor.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        checkSecao.setText("Seção");
        checkSecao.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        checkGrupo.setText("Grupo");
        checkGrupo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        checkSubGrupo.setText("SubGrupo");
        checkSubGrupo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        checkSubGrupo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkSubGrupoActionPerformed(evt);
            }
        });

        checkItensFornecedor.setText("Itens Fornecedor");
        checkItensFornecedor.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        checkTodos.setText("Todos");
        checkTodos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        checkTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkTodosActionPerformed(evt);
            }
        });

        checkClientes.setText("Clientes");
        checkClientes.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        checkContaReceber.setText("Cont. Receb");
        checkContaReceber.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        checkImpFedProd.setText("Imposto Federal Produto");
        checkImpFedProd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        checkImpostoFederal.setText("Imposto Federal");
        checkImpostoFederal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        checkImpostoFederal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkImpostoFederalActionPerformed(evt);
            }
        });

        checkSecaoGeral.setText("Seção Geral");
        checkSecaoGeral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkSecaoGeralActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(checkImpostoFederal)
                        .addGap(18, 18, 18)
                        .addComponent(checkImpFedProd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(checkSecaoGeral)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkTodos))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkProdutos)
                            .addComponent(checkClientes))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkCodBarras)
                            .addComponent(checkContaReceber))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkEstoque)
                            .addComponent(checkSecao))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkFornecedor)
                            .addComponent(checkGrupo))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkSubGrupo)
                            .addComponent(checkItensFornecedor))
                        .addGap(0, 60, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkProdutos)
                    .addComponent(checkCodBarras)
                    .addComponent(checkEstoque)
                    .addComponent(checkFornecedor)
                    .addComponent(checkItensFornecedor))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(checkSubGrupo)
                        .addComponent(checkClientes)
                        .addComponent(checkGrupo))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(checkSecao)
                        .addComponent(checkContaReceber)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkTodos)
                            .addComponent(checkSecaoGeral))
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkImpostoFederal)
                            .addComponent(checkImpFedProd))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnSair.setMnemonic('S');
        btnSair.setText("Sair");
        btnSair.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        btnSobre.setMnemonic('O');
        btnSobre.setText("ConfDB");
        btnSobre.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSobreActionPerformed(evt);
            }
        });

        btnExportar.setMnemonic('E');
        btnExportar.setText("Exportar");
        btnExportar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        JProgresso.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        JProgresso.setStringPainted(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lbProcesso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnExportar)
                        .addGap(18, 18, 18)
                        .addComponent(btnSobre)
                        .addGap(18, 18, 18)
                        .addComponent(btnSair))
                    .addComponent(JProgresso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSair)
                            .addComponent(btnSobre)
                            .addComponent(btnExportar))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lbProcesso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(JProgresso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(623, 332));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void checkTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkTodosActionPerformed
        if (checkTodos.isSelected()) {
            checkCodBarras.setSelected(true);
            checkEstoque.setSelected(true);
            checkFornecedor.setSelected(true);
            checkGrupo.setSelected(true);
            checkItensFornecedor.setSelected(true);
            if ( !checkSecaoGeral.isSelected() ){
                checkProdutos.setSelected(true);
                checkSecao.setSelected(true);
            }
            checkSubGrupo.setSelected(true);
            checkClientes.setSelected(true);
            checkContaReceber.setSelected(true);
            checkImpFedProd.setSelected(true);
            checkImpostoFederal.setSelected(true);
        } else {
            checkCodBarras.setSelected(!true);
            checkEstoque.setSelected(!true);
            checkFornecedor.setSelected(!true);
            checkGrupo.setSelected(!true);
            checkItensFornecedor.setSelected(!true);
            if (!checkSecaoGeral.isSelected()) {
                checkProdutos.setSelected(!true);
                checkSecao.setSelected(!true);
            }
            checkSubGrupo.setSelected(!true);
            checkClientes.setSelected(!true);
            checkContaReceber.setSelected(!true);
            checkImpFedProd.setSelected(!true);
            checkImpostoFederal.setSelected(!true);
        }
    }//GEN-LAST:event_checkTodosActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        logger.debug("Fechando janela principal");
        System.exit(0);
    }//GEN-LAST:event_btnSairActionPerformed

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        if (!checkCodBarras.isSelected() && !checkEstoque.isSelected() && !checkFornecedor.isSelected()
                && !checkGrupo.isSelected() && !checkItensFornecedor.isSelected() && !checkProdutos.isSelected()
                && !checkSecao.isSelected() && !checkSubGrupo.isSelected() && !checkClientes.isSelected()
                && !checkContaReceber.isSelected() && !checkImpFedProd.isSelected() && !checkImpostoFederal.isSelected()) {
            JOptionPane.showMessageDialog(this, "Por favor selecione uma opção!", "Informação", JOptionPane.INFORMATION_MESSAGE);
        } else {
            btnExportar.setEnabled(false);
            setCursor(WAIT_CURSOR);
            btnSobre.setEnabled(false);
            btnSair.setEnabled(false);
            checkCodBarras.setEnabled(false);
            checkEstoque.setEnabled(false);
            checkFornecedor.setEnabled(false);
            checkGrupo.setEnabled(false);
            checkItensFornecedor.setEnabled(false);
            checkProdutos.setEnabled(false);
            checkSecao.setEnabled(false);
            checkSubGrupo.setEnabled(false);
            checkClientes.setEnabled(false);
            checkContaReceber.setEnabled(false);
            checkImpFedProd.setEnabled(false);
            checkImpostoFederal.setEnabled(false);
            checkTodos.setEnabled(false);
            checkSecaoGeral.setEnabled(false);
            new ProcessarOpcoesSelecionadas().start();
        }
    }//GEN-LAST:event_btnExportarActionPerformed

    private void checkSubGrupoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSubGrupoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkSubGrupoActionPerformed

    private void btnSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSobreActionPerformed
        logger.debug("Carregando janela de configuração do banco de dados...");
        DialogConfDB frm = new DialogConfDB(this, true);
        frm.setVisible(true);
        logger.debug("Janela de configuração do banco de dados carregada com sucesso!");
    }//GEN-LAST:event_btnSobreActionPerformed

    private void checkImpostoFederalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkImpostoFederalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkImpostoFederalActionPerformed

    private void checkSecaoGeralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSecaoGeralActionPerformed
        if ( checkSecaoGeral.isSelected() ){
            checkSecao.setSelected(false);
            checkSecao.setEnabled(false);
            checkProdutos.setSelected(true);
        }else{
            checkSecao.setSelected(false);
            checkSecao.setEnabled(!false);
            checkProdutos.setSelected(!true);
        }
    }//GEN-LAST:event_checkSecaoGeralActionPerformed

    public String IncluirZeros(String texto, int tamMax){
        int max;
        int zeros;
        String txt;
        
        max = tamMax;
        txt = texto;
        zeros = tamMax - txt.length();
        for (int i = 0; i < zeros; i++) {
            txt = "0".concat(txt);
        }
        return txt;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar JProgresso;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnSobre;
    private javax.swing.JCheckBox checkClientes;
    private javax.swing.JCheckBox checkCodBarras;
    private javax.swing.JCheckBox checkContaReceber;
    private javax.swing.JCheckBox checkEstoque;
    private javax.swing.JCheckBox checkFornecedor;
    private javax.swing.JCheckBox checkGrupo;
    private javax.swing.JCheckBox checkImpFedProd;
    private javax.swing.JCheckBox checkImpostoFederal;
    private javax.swing.JCheckBox checkItensFornecedor;
    private javax.swing.JCheckBox checkProdutos;
    private javax.swing.JCheckBox checkSecao;
    private javax.swing.JCheckBox checkSecaoGeral;
    private javax.swing.JCheckBox checkSubGrupo;
    private javax.swing.JCheckBox checkTodos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lbProcesso;
    // End of variables declaration//GEN-END:variables
    class ProcessarProgresso extends Thread {

        public void run() {
            JProgresso.setMaximum(total);
            while (JProgresso.getValue() != total) {
                JProgresso.setValue(regAtual);
            }
            JProgresso.setValue(0);
        }
    }

    class ProcessarOpcoesSelecionadas extends Thread {

        @Override
        public void run() {
            cx = new ConectaBanco();
            cx2 = new ConectaBanco();
            cx3 = new ConectaBanco();
            cx4 = new ConectaBanco();
            logger.debug("Processando opções selecionadas");
            if (checkCodBarras.isSelected()) {
                FileWriter arquivo;
                arquivo = null;
                //Variaveis para auxiliar caso ocorra erros
                String codigo;
                String barras;
                String ultimoCodigo;
                ultimoCodigo = null;
                try {
                    logger.debug("Processando codigo de barras");
                    File pasta = new File("arquivos");
                    if ( !pasta.exists() ){
                        pasta.mkdir();
                    }
                    File arqBarras = new File(pasta+"/SYSPAUX.txt");
                    if ( arqBarras.exists() ){
                        arqBarras.delete();
                    }
                    arquivo = new FileWriter(arqBarras, true);
                    try {
                        cx.conexao();
                        cx2.conexao();
                        cx.executaQuery("select rtrim(ltrim(cdprod)) as codigo, rtrim(ltrim(codbarra)) as barras from estoque");
                        cx2.executaQuery("select count(*) from estoque");
                        cx.rs.first();
                        cx2.rs.first();
                        total = cx2.rs.getInt(1);
                        cx2.desconecta();
                        lbProcesso.setText("Processando cod Barras...");
                        ProcessarProgresso th = new ProcessarProgresso();
                        th.start();
                        String linha;
                        
                        List<String> listCodigoBarra = new ArrayList<>();
                        
                        do {
                            regAtual += 1;
                            System.out.println("Registro: " + regAtual);
                            
                            System.out.println("Campo01");
                            prodAuxArq = new ProdutoAUX();
                            System.out.println("Campo02");
                            codigo = cx.rs.getString("codigo");
//                            System.out.println("cdprod: " + IncluirZeros(codigo.trim().replaceAll("[\\s+]", ""), 14));
//                            System.out.println("cdprod tamanho: " + IncluirZeros(codigo.trim().replaceAll("[\\s+]", ""), 14).length());
                            prodAuxArq.setProcod(IncluirZeros(codigo.trim().replaceAll("[\\s+]", ""), 14));
                            System.out.println("Campo03");
                            barras = cx.rs.getString("barras");
                            prodAuxArq.setCodAux(IncluirZeros(barras.trim().replaceAll("[\\s+]", ""), 20));
                            System.out.println("codBarra: " + IncluirZeros(barras.trim().replaceAll("[\\s+]", ""), 20));
                            
                            System.out.println("Campo04 - Preparando linha");
                            linha = String.format(Locale.US, "%14.14s%20.20s%13.2f\n",
                                    prodAuxArq.getProcod(),
                                    prodAuxArq.getCodAux(), 1.00);
                            System.out.println("Campo05 - Gravando linha");
                            arquivo.write(linha);
                            System.out.println("Campo06 - Dando um refresh no arquivo");
                            arquivo.flush();
                            
                            System.out.println("Campo07 - Gravando ultimo codigo processado com sucesso!");
                            ultimoCodigo = codigo;
                            
                            listCodigoBarra.add(barras);
                            
                        } while (cx.rs.next());
                        logger.debug("Checando barras relacionadas...!");
                        total = 0;
                        regAtual = 0;
                        lbProcesso.setText("Codigo de barras gerado com sucesso!");
                        sleep(5000);
                        //Verificando se existe barras relacionadas
                        lbProcesso.setText("Checando barras relacionadas...");
                        sleep(5000);
                        FileWriter arqBarrasRepetidos;
                        cx.desconecta();
                        cx.conexao();
                        cx2.conexao();
                        
                        cx.executaQuery("select ltrim(cdprod) as codigo, ltrim(codbarra) as barras, multiplos from barrarel");
                        cx2.executaQuery("select count(*) from barrarel");
                        
                        cx2.rs.first();
                        total = cx2.rs.getInt(1);
                        cx2.desconecta();
                        
                        Double multiplos;
                        Set<String> barrasRepetidos = new HashSet<>();
                        
                        if ( total > 0 ){
                            logger.debug("Foi encontrado: " + total + " registros de barras relacionadas");
                            arqBarrasRepetidos = new FileWriter(pasta+"/codigo_de_barras_repetidos.txt", true);
                            cx.rs.first();
                            lbProcesso.setText("Foi encontrado: " + total + " registros de barras relacionadas");
                            sleep(5000);
                            logger.debug("Processando barras relacionadas...");
                            lbProcesso.setText("Processando barras relacionadas...");
                            do {
                                
                                regAtual += 1;
                                
                                prodAuxArq = new ProdutoAUX();
                                barras = cx.rs.getString("barras");
                                if ( ! listCodigoBarra.contains(barras)){
                                    codigo = cx.rs.getString("codigo");
                                    prodAuxArq.setProcod(IncluirZeros(codigo.trim().replaceAll("[\\s+]", ""), 14));
                                    prodAuxArq.setCodAux(IncluirZeros(barras.trim().replaceAll("[\\s+]", ""), 20));
                                    multiplos = cx.rs.getDouble("multiplos");
                                    if (multiplos < 1) {
                                        multiplos = 1.0;
                                    }
                                    prodAuxArq.setFator(multiplos);

                                    linha = String.format(Locale.US, "%14.14s%20.20s%13.2f\n",
                                            prodAuxArq.getProcod(),
                                            prodAuxArq.getCodAux(), prodAuxArq.getFator());
                                    arquivo.write(linha);
                                    arquivo.flush();
                                    ultimoCodigo = codigo;

                                    listCodigoBarra.add(barras);
                                }else{
                                    barrasRepetidos.add(barras+"\n");
                                }
                                
                            } while (cx.rs.next());
                            logger.debug("Finalizado o processo das barras relacionadas");
                            logger.debug("Gravando barras duplicadas...");
                            Iterator<String> barrasDupIterator = barrasRepetidos.iterator();
                            while ( barrasDupIterator.hasNext() ){
                                String i = barrasDupIterator.next();
                                arqBarrasRepetidos.write(i);
                                arqBarrasRepetidos.flush();
                            }
                            cx.desconecta();
                            total = 0;
                            regAtual = 0;
                            lbProcesso.setText("Barras relacionadas processado com sucesso!");
                            
                        }else{
                            cx.desconecta();
                            total = 0;
                            regAtual = 0;
                            lbProcesso.setText("Não foi encontrado nenhuma barra relacionada!");
                            sleep(500);
                        }
                        
                    } catch (SQLException ex) {
                        if ( ultimoCodigo == null ){
                            logger.error("Erro ao processar codigo de barras", ex);
                            JXErrorPane.showDialog(Principal.this,
                                    new ErrorInfo("OrionLine Automação Comercial",
                                            "Erro no processo dos codigos "
                                                    + "auxiliares do produto\n"
                                                    + "Ultimo codigo: " + ultimoCodigo, 
                                            "<html><h1><center>SQLException: </center></h1><p><b>" + ex.fillInStackTrace()
                                                    + "<b></p></html>", "Erro", ex, Level.ALL, null));
                        }else{
                            JXErrorPane.showDialog(Principal.this,
                                    new ErrorInfo("OrionLine Automação Comercial",
                                            "Erro no processo dos codigos "
                                                    + "auxiliares do produto",
                                            "<html><body style=background-image: "
                                                    + "url('br/com/orionline/imagens/logo.png')>"
                                                    + "<h1 style=><center>SQLException: </center></h1>"
                                                    + "<p><b>" + ex.fillInStackTrace()
                                                    + "<b></p></body></html>", "Erro", ex, Level.ALL, null));
                        }
                    } catch (IOException | NumberFormatException ex) {
                        logger.error("Erro ao processar codigo de barras", ex);
                        JXErrorPane.showDialog(Principal.this,
                                new ErrorInfo("OrionLine Automação Comercial",
                                        "Erro no processo nos codigos auxiliares do produto",
                                        "<html><h1><center>SQLException: </center></h1><p><b>" + ex.fillInStackTrace() + "<b></p></html>", "Erro", ex, Level.ALL, null));
                    } catch (InterruptedException ex) {
                        java.util.logging.Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    logger.debug("Finalizado processamento do codigo de barras");
                } catch (IOException ex) {
                    JXErrorPane.showDialog(Principal.this,
                            new ErrorInfo("OrionLine Automação Comercial",
                                    "Erro no processo dos codigos "
                                    + "auxiliares do produto",
                                    "<html><body style=background-image: "
                                    + "url('br/com/orionline/imagens/logo.png')>"
                                    + "<h1 style=><center>IOException: </center></h1>"
                                    + "<p><b>" + ex.fillInStackTrace()
                                    + "<b></p></body></html>", "Erro", ex, Level.ALL, null));
                } finally {
                    try {
                        arquivo.close();
                    } catch (IOException ex) {
                        JXErrorPane.showDialog(Principal.this,
                                new ErrorInfo("OrionLine Automação Comercial",
                                        "Erro no processo dos codigos "
                                        + "auxiliares do produto",
                                        "<html><body style=background-image: "
                                        + "url('br/com/orionline/imagens/logo.png')>"
                                        + "<h1 style=><center>IOException: </center></h1>"
                                        + "<p><b>" + ex.fillInStackTrace()
                                        + "<b></p></body></html>", "Erro", ex, Level.ALL, null));
                    }
                }
            }
            if (checkEstoque.isSelected()) {
                logger.debug("Processando estoque...");
                
                File pasta = new File("arquivos");
                if ( !pasta.exists() ){
                    pasta.mkdir();
                }
                File arqEstoque = new File(pasta+"/SYSPEST.txt");
                if ( arqEstoque.exists() ){
                    arqEstoque.delete();
                }
                
                FileWriter arquivo;
                DateFormat df = new SimpleDateFormat("ddMMyyyy");
                df.setLenient(false);
                Date dataSaida;
                Date dataEntrada;
                String dtaSaida;
                String dtaEntrada;
                
                //variaveis
                String linha;
                String codigo;
                String ultimoCodigo;
                
                //Conexões com o banco de dados
                cx.conexao();
                cx2.conexao();
                cx.executaQuery("select * from saldos");
                cx2.executaQuery("select count(*) from saldos");
                try {
                    arquivo = new FileWriter(arqEstoque, true);
                    cx.rs.first();
                    cx2.rs.first();
                    total = cx2.rs.getInt(1);
                    cx2.desconecta();
                    lbProcesso.setText("Processando Estoque...");
                    new ProcessarProgresso().start();
                    do {
                        regAtual += 1;

                        estoqueArq = new Estoque();
                        codigo = cx.rs.getString("cdprod");
                        estoqueArq.setProcod(IncluirZeros(codigo.replaceAll("[\\s+]", ""), 14));
                        estoqueArq.setSaldoEstoque(cx.rs.getDouble("quant"));
                        dataEntrada = cx.rs.getDate("dtultentra");
                        if (dataEntrada == null) {
                            estoqueArq.setDataUltimaEntrada("");
                        } else {
                            dtaEntrada = df.format(dataEntrada);
                            estoqueArq.setDataUltimaEntrada(dtaEntrada);
                        }
                        dataSaida = cx.rs.getDate("dtultsaida");
                        if (dataSaida == null) {
                            estoqueArq.setDataUltimaSaida("");
                        } else {
                            dtaSaida = df.format(dataSaida);
                            estoqueArq.setDataUltimaSaida(dtaSaida);
                        }
                        
                        linha = String.format(Locale.US, "%14.14s%15.2f%8.8s%8.8s\n", 
                                estoqueArq.getProcod(), estoqueArq.getSaldoEstoque(), 
                                estoqueArq.getDataUltimaEntrada(), estoqueArq.getDataUltimaSaida());
                        
                        arquivo.write(linha);
                        arquivo.flush();
                        
                        ultimoCodigo = codigo;
                        
                    } while (cx.rs.next());
                    logger.debug("Estoque Gravado em arquivo!");
                    total = 0;
                    regAtual = 0;
                    lbProcesso.setText(null);
                } catch (SQLException ex) {
                    logger.error("Erro ao processar Estoque", ex);
                    JXErrorPane.showDialog(Principal.this,
                            new ErrorInfo("OrionLine Automação Comercial",
                                    "Erro no processo do Estoque", "<html><center>SQLException: </center><p><b>" + ex.fillInStackTrace() + "<b></p></html>", "Erro", ex, Level.ALL, null));
                } catch (IOException ex) {
                    java.util.logging.Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                cx.desconecta();
                logger.debug("Processo do Estoque finalizado!");
            }
            if (checkFornecedor.isSelected()) {
                logger.debug("Processando Fornecedor...");
                String telefone;
                String fax;
                String cep;
                String cnpj;
                String IE;
                String desc;
                String bairro;
                String end;
                String cidade;
                String uf;
                String contato;
                String fantasia;
                String obs;
                String comp;
                List<Fornecedor> fornecedorList = new ArrayList<>();
                cx.conexao();
                cx2.conexao();
                cx.executaQuery("select * from credor");
                cx2.executaQuery("select count(*) from credor");
                try {
                    cx.rs.first();
                    cx2.rs.first();
                    total = cx2.rs.getInt(1);
                    cx2.desconecta();
                    lbProcesso.setText("Processando Fornecedor...");
                    new ProcessarProgresso().start();
                    do {
                        regAtual += 1;

                        fornecedorArq = new Fornecedor();
                        fornecedorArq.setCodFornecedor(cx.rs.getInt("codigo"));
                        desc = cx.rs.getString("razsoc");
                        if (desc == null) {
                            fornecedorArq.setDescricao(desc);
                        } else {
                            fornecedorArq.setDescricao(desc
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        end = cx.rs.getString("ender");
                        if (end == null) {
                            fornecedorArq.setEndereco(end);
                        } else {
                            fornecedorArq.setEndereco(end
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        bairro = cx.rs.getString("bairro");
                        if (bairro == null) {
                            fornecedorArq.setBairro(bairro);
                        } else {
                            fornecedorArq.setBairro(bairro
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        cidade = cx.rs.getString("munic");
                        if (cidade == null) {
                            fornecedorArq.setCidade(cidade);
                        } else {
                            fornecedorArq.setCidade(cidade
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        uf = cx.rs.getString("estado");
                        if (uf == null) {
                            fornecedorArq.setEstado(uf);
                        } else {
                            fornecedorArq.setEstado(uf
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        telefone = cx.rs.getString("telefone");
                        if (telefone == null) {
                            fornecedorArq.setTelefone(null);
                        } else {
                            fornecedorArq.setTelefone(telefone.replaceAll("[^0-9]", ""));
                        }
                        fax = cx.rs.getString("telefax");
                        if (fax == null) {
                            fornecedorArq.setFax(null);
                        } else {
                            fornecedorArq.setFax(fax.replaceAll("[^0-9]", ""));
                        }
                        cep = cx.rs.getString("cep");
                        if (cep == null) {
                            fornecedorArq.setCep(null);
                        } else {
                            fornecedorArq.setCep(cep.replaceAll("[^0-9]", ""));
                        }
                        contato = cx.rs.getString("contato");
                        if (contato == null) {
                            fornecedorArq.setContato(contato);
                        } else {
                            fornecedorArq.setContato(contato
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        obs = cx.rs.getString("obs");
                        if (obs == null) {
                            fornecedorArq.setObervacao(obs);
                        } else {
                            fornecedorArq.setObervacao(obs
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        fantasia = cx.rs.getString("nomfan");
                        if (fantasia == null) {
                            fornecedorArq.setNomeFantasia(fantasia);
                        } else {
                            fornecedorArq.setNomeFantasia(fantasia
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        fornecedorArq.setNumeroFornecedor(String.valueOf(cx.rs.getInt("numero")));
                        comp = cx.rs.getString("complemen");
                        if (comp == null) {
                            fornecedorArq.setComplemento(comp);
                        } else {
                            fornecedorArq.setComplemento(comp
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        cnpj = cx.rs.getString("cgc");
                        if (cnpj == null) {
                            fornecedorArq.setCnpj(cnpj);
                        } else {
                            fornecedorArq.setCnpj(cnpj.replaceAll("[^0-9]", ""));
                        }
                        IE = cx.rs.getString("insest");
                        if (IE == null) {
                            fornecedorArq.setIE(IE);
                        } else {
                            fornecedorArq.setIE(IE.replaceAll("[^0-9]", ""));
                        }

                        System.out.println("registro atual: " + regAtual);
                        fornecedorList.add(fornecedorArq);
                    } while (cx.rs.next());
                    logger.debug("Gravando Fornecedor em arquivo...");
                    new GravaTexto().geraFornecedor(fornecedorList);
                    logger.debug("Fornecedor gravado com sucesso em arquivo!");
                    total = 0;
                    regAtual = 0;
                    lbProcesso.setText(null);
                } catch (SQLException ex) {
                    logger.error("Erro no processo do Fornecedor", ex);
                    JXErrorPane.showDialog(Principal.this,
                            new ErrorInfo("OrionLine Automação Comercial",
                                    "Erro no processo do Fornecedor", "<html><center>SQLException: </center><p><b>" + ex.fillInStackTrace() + "<b></p></html>", "Erro", ex, Level.ALL, null));
                }
                cx.desconecta();
                logger.debug("Processo do Fornecedor finalizado!");
            }
            if (checkGrupo.isSelected()) {
                JOptionPane.showMessageDialog(null, "Falta criar o codigo!", "Informaçao", JOptionPane.WARNING_MESSAGE);
            }
            if (checkItensFornecedor.isSelected()) {
                logger.debug("Processando Itens do Fornecedor");
                String cdProd = null;
                String unidade = null;
                List<ProdutoFornecedor> produtoFornecedorList = new ArrayList<ProdutoFornecedor>();
                cx.conexao();
                cx2.conexao();
                cx3.conexao();
                cx.executaQuery("select * from estforns");
                cx2.executaQuery("select count(*) from estforns");
                try {
                    cx.rs.first();
                    cx2.rs.first();
                    total = cx2.rs.getInt(1);
                    cx2.desconecta();
                    lbProcesso.setText("Processando Itens Fornecedor...");
                    new ProcessarProgresso().start();
                    do {
                        regAtual += 1;

                        prodFornecArq = new ProdutoFornecedor();

                        cdProd = cx.rs.getString("cdprod");
                        cx3.executaQuery("select * from estoque where cdprod = '" + cdProd + "'");
                        cx3.rs.first();
                        unidade = cx3.rs.getString("unidade");

                        prodFornecArq.setProcod(cdProd);
                        prodFornecArq.setCodigoFornecedor(cx.rs.getInt("fornec"));
                        prodFornecArq.setReferenciaFornecedor(cx.rs.getString("codigo"));
                        prodFornecArq.setUnidadeCompra(unidade);
                        prodFornecArq.setItensEmbalagem(1);
                        prodFornecArq.setNivelPreferencia("P");

                        produtoFornecedorList.add(prodFornecArq);
                    } while (cx.rs.next());
                    logger.debug("Gravando itens do fornecedor em arquivo...");
                    new GravaTexto().geraItensFornecedor(produtoFornecedorList);
                    logger.debug("Itens do fornecedor gravado com sucesso em arquivo!");
                    total = 0;
                    regAtual = 0;
                    lbProcesso.setText(null);
                } catch (SQLException ex) {
                    logger.error("Erro no proceso do Itens do Fornecedor", ex);
                    JXErrorPane.showDialog(Principal.this,
                            new ErrorInfo("OrionLine Automação Comercial",
                                    "Erro no processo nos itens dos Fornecedores", "<html><center>SQLException: </center><p><b>" + ex.fillInStackTrace() + "<b></p></html>", "Erro", ex, Level.ALL, null));
                }
                cx.desconecta();
                cx3.desconecta();
            }
            if (checkProdutos.isSelected()) {
                logger.debug("Processando Produtos...");
                String forlin = null;
                DateFormat df = new SimpleDateFormat("ddMMyyyy");
                df.setLenient(false);
                Date dataAlteracao;
                Date dataInclusao;
                Date dataForLin;
                Date dataUltReajustePrc1;
                Date dataUltReajustePrc2;
                Date dataUltReajustePrc3;
                String dtaAlteracao = null;
                String dtaInclusao;
                String dtaForLin;
                String dtaUltReajustePrc1;
                String dtaUltReajustePrc2;
                String dtaUltReajustePrc3;
                String cdprod;
                String unidade;
                String ncm;
                String genero;
                String situacao;
                String descricao;
                
                //variavel ajudar a capiturar possíveis erros
                String ultimoCodigoProduto = null;
                String ultimaDescricao = null;
                int tributa;
                int setor;
                Double itensEmb;
                List<Produto> produtoList = new ArrayList<>();
                cx.conexao();
                cx2.conexao();

                cx.executaQuery("select * from estoque");
                cx2.executaQuery("select count(*) from estoque");
                try {
                    cx.rs.first();
                    cx2.rs.first();
                    total = cx2.rs.getInt(1);
                    cx2.desconecta();
                    lbProcesso.setText("Processando Produtos...");
                    new ProcessarProgresso().start();
                    do {
                        regAtual += 1;

                        System.out.println("Registro atual: " + regAtual);

                        prodArq = new Produto();
                        System.out.println("Campo 1");
                        cdprod = cx.rs.getString("cdprod");
                        prodArq.setProcod(cdprod);
                        System.out.println("Campo 2");
                        descricao = cx.rs.getString("descricao");
                        prodArq.setDescricao(descricao.toUpperCase()
                                .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        System.out.println("Campo 3");
                        prodArq.setDescricaoReduzidsa(cx.rs.getString("descpdv").toUpperCase()
                                .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        System.out.println("Campo 4");
                        if ( checkSecaoGeral.isSelected() ){
                            prodArq.setCodSecao(01);
                        }else{
                            prodArq.setCodSecao(cx.rs.getInt("grupo"));
                        }
                        System.out.println("Campo 5");
                        prodArq.setPagaComissao("N");
                        System.out.println("Campo 6");
                        tributa = cx.rs.getInt("tributa");
                        if (tributa == 1) {
                            prodArq.setTributacao("F00");
                        }
                        if (tributa == 2) {
                            prodArq.setTributacao("I00");
                        }
                        if (tributa == 3) {
                            prodArq.setTributacao("T17");
                        }
                        if (tributa == 4) {
                            prodArq.setTributacao("T12");
                        }
                        if (tributa == 5) {
                            prodArq.setTributacao("T18");
                        }
                        if (tributa == 6) {
                            prodArq.setTributacao("T25");
                        }
                        if (tributa == 7) {
                            prodArq.setTributacao("T18");
                        }
                        if (tributa == 8) {
                            prodArq.setTributacao("T12");
                        }
                        System.out.println("Campo 7");
                        setor = cx.rs.getInt("setor");
                        if (setor == 1) {
                            prodArq.setPesoVariavel("S");
                        } else {
                            prodArq.setPesoVariavel("N");
                        }
                        System.out.println("Campo 8");
                        prodArq.setCodLocalImpressao(00);
                        System.out.println("Campo 9");
                        prodArq.setComissao1(cx.rs.getDouble("comissao"));
                        System.out.println("Campo 10");
                        prodArq.setComissao2(0.00);
                        System.out.println("Campo 11");
                        prodArq.setComissao3(0.00);
                        System.out.println("Campo 12");
                        prodArq.setDescontoMaximo(cx.rs.getDouble("desconto"));
                        System.out.println("Campo 13 - Executando query no saldos");
                        cx3.conexao();
                        cx3.executaQuery("select * from saldos where cdprod = '" + cdprod + "'");
                        System.out.println("Campo 14 - Movendo o cursor do ResultSet para o primeiro registro");
                        cx3.rs.first();
                        System.out.println("Campo 15");
                        prodArq.setPrecoVenda1(cx3.rs.getDouble("termvenda"));
                        System.out.println("Campo 16");
                        prodArq.setPrecoOferta1(0.00);
                        System.out.println("Campo 17");
                        prodArq.setDiasDeValidade(cx.rs.getInt("validade"));
                        System.out.println("Campo 18");
                        prodArq.setPrecoVariavel("N");
                        System.out.println("Campo 19");
                        prodArq.setFrenteDeLoja("N");
                        System.out.println("Campo 20");
                        prodArq.setEstoqueMinimo(cx3.rs.getDouble("estminimo"));
                        System.out.println("Campo 21");
                        prodArq.setEstoqueMaximo(cx3.rs.getDouble("estmaximo"));
                        System.out.println("Campo 22");
                        prodArq.setCodFornecedor(cx.rs.getInt("fornec"));
                        System.out.println("Campo 23");
                        prodArq.setPrecoVenda2(cx3.rs.getDouble("termatac"));
                        System.out.println("Campo 24");
                        prodArq.setPrecoOferta2(0.00);
                        System.out.println("Campo 25");
                        prodArq.setPrecoVenda3(cx3.rs.getDouble("termesp"));
                        System.out.println("Campo 26");
                        prodArq.setPrecoOferta3(0.00);
                        System.out.println("Campo 27");
                        prodArq.setTabelaA("0");
                        System.out.println("Campo 28");
                        prodArq.setTipoBonificacao(null);
                        System.out.println("Campo 29");
                        prodArq.setFatorBonificacao(0.00);
                        System.out.println("Campo 30");
                        dataAlteracao = cx3.rs.getDate("ultatu");
                        if (dataAlteracao == null) {
                            dtaForLin = null;
                            prodArq.setDataAlteracao("");
                        } else {
                            dtaAlteracao = df.format(dataAlteracao);
                            dtaForLin = dtaAlteracao;
                            prodArq.setDataAlteracao(dtaAlteracao);
                        }
                        System.out.println("Campo 31");
                        prodArq.setQuantidadeEtiqueta(1);
                        System.out.println("Campo 32");
                        unidade = cx.rs.getString("unidade");
                        System.out.println("Campo 33");
                        prodArq.setUnidadeVenda(unidade);
                        System.out.println("Campo 34");
                        prodArq.setIndentificaProdutoAlterado("A");
                        System.out.println("Campo 35");
                        prodArq.setPrecoCusto(cx3.rs.getDouble("precocusto"));
                        prodArq.setControlaNumSerie("N");
                        System.out.println("Campo 36");
                        prodArq.setControlaEstoque("S");
                        System.out.println("Campo 37");
                        prodArq.setPermiteDesconto("S");
                        System.out.println("Campo 38");
                        prodArq.setTipoEspecializacaoProduto("O");
                        System.out.println("Campo 39");
                        prodArq.setComposicao(null);
                        if (setor == 1) {
                            prodArq.setEnviaBalanca("S");
                            prodArq.setControlaValidade("S");
                        } else {
                            prodArq.setEnviaBalanca("N");
                            prodArq.setControlaValidade("N");
                        }
                        System.out.println("Campo 40");
                        prodArq.setMargemVenda1(cx3.rs.getDouble("perclucro"));
                        System.out.println("Campo 41");
                        prodArq.setMargemVenda2(cx3.rs.getDouble("perclatac"));
                        System.out.println("Campo 42");
                        prodArq.setMargemVenda3(cx3.rs.getDouble("perclesp"));
                        System.out.println("Campo 43");
                        prodArq.setMixProduto(null);
                        System.out.println("Campo 44");
                        dataInclusao = cx3.rs.getDate("cadastro");
                        if (dataInclusao == null) {
                            prodArq.setDataInclusao("");
                        } else {
                            dtaInclusao = df.format(dataInclusao);
                            prodArq.setDataInclusao(dtaInclusao);
                        }
                        System.out.println("Campo 45");
                        situacao = cx3.rs.getString("situacao");
                        if (situacao == null || situacao.equals("A")) {
                            prodArq.setDataForaDeLinha("");
                        } else {
                            prodArq.setDataForaDeLinha(dtaAlteracao);
                        }
                        System.out.println("Campo 46");
                        dataUltReajustePrc1 = cx3.rs.getDate("dtultreaj");
                        if (dataUltReajustePrc1 == null) {
                            prodArq.setDataUltimoReajustePreco1("");
                        } else {
                            dtaUltReajustePrc1 = df.format(dataUltReajustePrc1);
                            prodArq.setDataUltimoReajustePreco1(dtaUltReajustePrc1);
                        }
                        System.out.println("Campo 47");
                        dataUltReajustePrc2 = cx3.rs.getDate("dtultrata");
                        if (dataUltReajustePrc2 == null) {
                            prodArq.setDataUltimoReajustePreco2("");
                        } else {
                            dtaUltReajustePrc2 = df.format(dataUltReajustePrc2);
                            prodArq.setDataUltimoReajustePreco2(dtaUltReajustePrc2);
                        }
                        System.out.println("Campo 48");
                        dataUltReajustePrc3 = cx3.rs.getDate("dtultresp");
                        if (dataUltReajustePrc3 == null) {
                            prodArq.setDataUltimoReajustePreco3("");
                        } else {
                            dtaUltReajustePrc3 = df.format(dataUltReajustePrc3);
                            prodArq.setDataUltimoReajustePreco3(dtaUltReajustePrc3);
                        }
                        System.out.println("Campo 49");
                        prodArq.setDescricaVariavel(null);
                        System.out.println("Campo 50");
                        prodArq.setEnderecoEstoque(null);
                        System.out.println("Campo 51");
                        prodArq.setQuantidadeMinimaDeVendaPreco2(cx3.rs.getDouble("acimadeata"));
                        System.out.println("Campo 52");
                        prodArq.setQuantidadeMinimaDeVendaPreco3(cx3.rs.getDouble("acimadeesp"));
                        System.out.println("Campo 53");
                        prodArq.setCodigoGrupo(0);
                        System.out.println("Campo 54");
                        prodArq.setCodigoSubGrupo(0);
                        System.out.println("Campo 55");
                        itensEmb = cx.rs.getDouble("porcaixa");
                        if (itensEmb == 0.0) {
                            prodArq.setQuantidadeItensEmbalagem(1.00);
                        } else {
                            prodArq.setQuantidadeItensEmbalagem(itensEmb);
                        }
                        System.out.println("Campo 56");
                        prodArq.setQuantidadeMaximaProdOferta(0.00);
                        System.out.println("Campo 57");
                        prodArq.setPesoBruto(cx.rs.getDouble("pesobru"));
                        System.out.println("Campo 58");
                        prodArq.setPesoLiquido(cx.rs.getDouble("pesoliq"));
                        System.out.println("Campo 59");
                        prodArq.setUnidadeReferencia(null);
                        System.out.println("Campo 60");
                        prodArq.setMedidaReferencia(0.00);
                        System.out.println("Campo 61");
                        genero = cx.rs.getString("cfiscal");
                        if (genero == null || genero.length() < 8) {
                            ncm = null;
                            prodArq.setCodigoGenero(null);
                        } else {
                            ncm = genero;
                            prodArq.setCodigoGenero(genero.substring(0, 2));
                        }
                        System.out.println("Campo 62");
                        prodArq.setComplementoDescProd(null);
                        System.out.println("Campo 63");
                        prodArq.setReservado(null);
                        System.out.println("Campo 64");
                        prodArq.setUnidadeCompra(unidade);
                        System.out.println("Campo 65");
                        prodArq.setReservado2(0);
                        System.out.println("Campo 66");
                        prodArq.setCodigoNaturezaReceita(999);
                        System.out.println("Campo 67");
                        prodArq.setNcm(ncm);
                        System.out.println("Campo 68");
                        prodArq.setNcmExcecao(null);
                        cx3.desconecta();
                        
                        ultimoCodigoProduto = cdprod;
                        ultimaDescricao = descricao;

                        produtoList.add(prodArq);
                    } while (cx.rs.next());
                    logger.debug("Gravando Produto em arquivo...");
                    new GravaTexto().geraProduto(produtoList);
                    if ( checkSecaoGeral.isSelected() ){
                        try( FileWriter arqSecao = new FileWriter("arquivos/SYSPSEC.txt")){
                            String linha = String.format("%01d%-30.30s\n", 01, "GERAL");
                            arqSecao.write(linha);
                        } catch (IOException ex) {
                            logger.error("Erro ao criar aquivo com a seção geral");
                            JXErrorPane.showDialog(Principal.this,
                                    new ErrorInfo("OrionLine Automação Comercial",
                                            "Erro ao criar arquivo com a seção geral",
                                            "<html><head></head><body><h1 color: red><center>IOException: </center></h1><p><b>"
                                            + ex.fillInStackTrace() + "<b></p></body></html>",
                                            "Erro", ex, Level.ALL, null));
                        }
                    }
                    logger.debug("Produto salvo em arquivo com sucesso!");
                    total = 0;
                    regAtual = 0;
                    lbProcesso.setText(null);
                } catch (SQLException ex) {
                    logger.error("Erro no processo do Produto! - ultimo_codigo: " + ultimoCodigoProduto + " - Ultima Descrição: " + ultimaDescricao, ex);
                    JXErrorPane.showDialog(Principal.this,
                            new ErrorInfo("OrionLine Automação Comercial",
                                    "Erro no processo dos Produtos"
                                            + "\nUltimo codigo: " + ultimoCodigoProduto 
                                            + "\nUltima Descrição: " + ultimaDescricao, 
                                    "<html><head></head><body><h1 color: red><center>SQLException: </center></h1><p><b>" 
                                            + ex.fillInStackTrace() + "<b></p></body></html>", 
                                    "Erro", ex, Level.ALL, null));
                }
                cx.desconecta();
                logger.debug("Finalizado o processo do Produto!");
            }
            if (checkSecao.isSelected()) {
                logger.debug("Processando Seção...");
                List<Secao> secaoList = new ArrayList<Secao>();
                cx.conexao();
                cx2.conexao();
                cx.executaQuery("select * from grupo");
                cx2.executaQuery("select count(*) from grupo");
                try {
                    cx.rs.first();
                    cx2.rs.first();
                    total = cx2.rs.getInt(1);
                    cx2.desconecta();
                    lbProcesso.setText("Processando Seção...");
                    do {
                        regAtual += 1;

                        secaoArq = new Secao();
                        secaoArq.setCodSecao(cx.rs.getInt("codigo"));
                        secaoArq.setDescricao(cx.rs.getString("descricao")
                                .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));

                        secaoList.add(secaoArq);
                    } while (cx.rs.next());
                    logger.debug("Gravando seção em arquivo...");
                    new GravaTexto().geraSecao(secaoList);
                    logger.debug("Seção salvo em arquivo com sucesso!");
                    total = 0;
                    regAtual = 0;
                    lbProcesso.setText(null);
                } catch (SQLException ex) {
                    logger.error("Erro no processo da Seção", ex);
                    JXErrorPane.showDialog(Principal.this,
                            new ErrorInfo("OrionLine Automação Comercial",
                                    "Erro no processo da Seção", "<html><center>SQLException: </center><p><b>" + ex.fillInStackTrace() + "<b></p></html>", "Erro", ex, Level.ALL, null));
                }
                cx.desconecta();
                logger.debug("Finalizado o processo da Seção!");
            }
            if (checkClientes.isSelected()) {
                logger.debug("Processando Clientes...");
                DateFormat df = new SimpleDateFormat("yyyyMMdd");
                df.setLenient(false);
                Date dataCadastro;
                Date dataNasc;
                Date dataUltAlt;

                String dtaCadastro;
                String dtaNasc;
                String dtaUltAlt;

                String razsoc;
                String Fantasia;
                String endereco;
                String enderecoCob;
                String enderecoEnt;
                String bairro;
                String bairroCob;
                String bairroEnt;
                String cidade;
                String cidadeCob;
                String cidadeEnt;
                String telefone;
                String tel2;
                String telcom;
                String telEnt;
                String fax;
                String cnpj;
                String rgie;
                String cep;
                String cepCob;
                String estado;
                String estadoCob;
                String situacao;
                String dataBloq;
                String diaBloq;
                String mesBloq;
                String anoBloq;
                String contato;
                String msg;
                String obs;
                String obs2;
                Double desconto;
                String email;
                String cnae;
                String tipoResdidencia;
                String complemento;
                String complementoCob;
                int tamCnpj = 0;
                int numero;
                String cnpjNew;
                List<Clientes> clientes = new ArrayList<Clientes>();

                cx.conexao();
                cx2.conexao();

                cx.executaQuery("select * from clientes");
                cx2.executaQuery("select count(*) from clientes");
                try {
                    cx.rs.first();
                    cx2.rs.first();
                    total = cx2.rs.getInt(1);
                    cx2.desconecta();
                    lbProcesso.setText("Processando Clientes...");
                    new ProcessarProgresso().start();
                    do {

                        regAtual += 1;

                        cli = new Clientes();

                        System.out.println("Registro: " + regAtual);

                        System.out.println("Campo01");
                        cli.setCodigo(cx.rs.getInt("codigo"));
                        System.out.println("Campo02");
                        razsoc = cx.rs.getString("razsoc");
                        if (razsoc == null) {
                            cli.setDescricao("");
                        } else {
                            cli.setDescricao(razsoc
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        System.out.println("Campo03");
                        cnpj = cx.rs.getString("CGC");
                        if (cnpj == null) {
                            cli.setCPF_CNPJ(null);
                        } else {
                            cnpjNew = cnpj.replaceAll("[^0-9]", "");
                            tamCnpj = cnpjNew.length();
                            if (tamCnpj >= 12) {
                                cli.setCPF_CNPJ(cnpjNew.substring(0, tamCnpj - 1));
                            } else {
                                cli.setCPF_CNPJ(cnpjNew);
                            }
                        }
                        System.out.println("Campo04");
                        endereco = cx.rs.getString("ender");
                        if (endereco == null) {
                            cli.setEndereco(null);
                        } else {
                            cli.setEndereco(endereco
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        System.out.println("Campo05");
                        bairro = cx.rs.getString("bairro");
                        if (bairro == null) {
                            cli.setBairro(null);
                        } else {
                            cli.setBairro(bairro
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        System.out.println("Campo06");
                        cidade = cx.rs.getString("munic");
                        if (cidade == null) {
                            cli.setCidade(null);
                        } else {
                            cli.setCidade(cidade
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        System.out.println("Campo07");
                        estado = cx.rs.getString("estado");
                        if (estado == null) {
                            cli.setEstado(null);
                        } else {
                            cli.setEstado(estado
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        System.out.println("Campo08");
                        cep = cx.rs.getString("cep");
                        if (cep == null) {
                            cli.setCep(null);
                        } else {
                            cli.setCep(cep.replaceAll("[^0-9]", ""));
                        }
                        System.out.println("Campo09");
                        telefone = cx.rs.getString("telefone");
                        if (telefone == null) {
                            cli.setTelefone(null);
                        } else {
                            cli.setTelefone(telefone.replaceAll("[^0-9]", ""));
                        }
                        System.out.println("Campo10");
                        cli.setLimite(cx.rs.getDouble("limite"));
                        System.out.println("Campo11");
                        cli.setLimite_usado(cx.rs.getDouble("saldo"));
                        System.out.println("Campo12");
                        situacao = cx.rs.getString("situacao");
                        dataBloq = cx.rs.getString("usrblo");
                        if (situacao.trim().equalsIgnoreCase("L")) {
                            cli.setStatus(01);
                            obs2 = "";
                            cli.setData_bloqueio("");
                        } else {
                            cli.setStatus(02);
                            if (dataBloq == null) {
                                obs2 = null;
                                cli.setData_bloqueio(null);
                            } else {
                                obs2 = dataBloq;
                                diaBloq = dataBloq.substring(15, 17);
                                System.out.println("dia: " + diaBloq);
                                mesBloq = dataBloq.substring(18, 20);
                                System.out.println("Mês: " + mesBloq);
                                anoBloq = dataBloq.substring(21, 25);
                                System.out.println("Ano: " + anoBloq);
                                cli.setData_bloqueio(anoBloq + mesBloq + diaBloq);
                            }
                        }
                        System.out.println("Campo13");
                        cli.setTabela_prazo("PRZ");
                        System.out.println("Campo14");
                        cli.setPrazo(30);
                        System.out.println("Campo15");
                        Fantasia = cx.rs.getString("nomfan");
                        if (Fantasia == null) {
                            cli.setNome_fantasia(null);
                        } else {
                            cli.setNome_fantasia(Fantasia
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        System.out.println("Campo16");
                        rgie = cx.rs.getString("insest");
                        if (rgie == null) {
                            cli.setRg_ie(null);
                        } else {
                            cli.setRg_ie(rgie.replaceAll("[^0-9]", ""));
                        }
                        System.out.println("Campo17");
                        dataCadastro = cx.rs.getDate("cadastro");
                        if (dataCadastro == null) {
                            cli.setData_cadastro(null);
                        } else {
                            dtaCadastro = df.format(dataCadastro);
                            cli.setData_cadastro(dtaCadastro);
                        }
                        System.out.println("Campo18");
                        dataNasc = cx.rs.getDate("dtnasc");
                        if (dataNasc == null) {
                            cli.setData_nascimento(null);
                        } else {
                            dtaNasc = df.format(dataNasc);
                            cli.setData_nascimento(dtaNasc);
                        }
//                        System.out.println("Campo19");
////                        dataBloq = cx.rs.getString("usrblo");
//                        if (situacao.equals("L")) {
//                            obs2 = dataBloq;
//                            cli.setData_bloqueio("");
//                        } else {
////                            if (dataBloq == null) {
////                                obs2 = dataBloq;
////                                cli.setData_bloqueio(dataBloq);
////                            } else {
////                                obs2 = dataBloq;
////                                diaBloq = dataBloq.substring(15, 17);
////                                System.out.println("dia: " + diaBloq);
////                                mesBloq = dataBloq.substring(18, 20);
////                                System.out.println("Mês: " + mesBloq);
////                                anoBloq = dataBloq.substring(21, 25);
////                                System.out.println("Ano: " + anoBloq);
////                                cli.setData_bloqueio(anoBloq + mesBloq + diaBloq);
////                            }
//                        }
                        System.out.println("Campo20");
                        cli.setNomePai("");
                        System.out.println("Campo21");
                        cli.setNomeMae("");
                        if (tamCnpj <= 11) {
                            cli.setTipoPessoa("F");
                        } else {
                            cli.setTipoPessoa("J");
                        }
                        System.out.println("Campo22");
                        tel2 = cx.rs.getString("telcob");
                        if (tel2 == null) {
                            cli.setTelefone2(null);
                        } else {
                            cli.setTelefone2(tel2.replaceAll("[^0-9]", ""));
                        }
                        System.out.println("Campo23");
                        fax = cx.rs.getString("telefax");
                        if (fax == null) {
                            cli.setFax(null);
                        } else {
                            cli.setFax(fax.replaceAll("[^0-9]", ""));
                        }
                        System.out.println("Campo24");
                        contato = cx.rs.getString("contato");
                        if (contato == null) {
                            cli.setNomeContato(null);
                        } else {
                            cli.setNomeContato(contato
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        System.out.println("Campo25");
                        enderecoCob = cx.rs.getString("endecob");
                        if (enderecoCob == null) {
                            cli.setEndereco_cobranca(null);
                        } else {
                            cli.setEndereco_cobranca(enderecoCob
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        System.out.println("Campo26");
                        bairroCob = cx.rs.getString("baicob");
                        if (bairroCob == null) {
                            cli.setBairroCobranca(null);
                        } else {
                            cli.setBairroCobranca(bairroCob
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        System.out.println("Campo27");
                        cepCob = cx.rs.getString("cepcob");
                        if (cepCob == null) {
                            cli.setCepCobranca(null);
                        } else {
                            cli.setCepCobranca(cepCob.replaceAll("[^0-9]", ""));
                        }
                        System.out.println("Campo28");
                        cidadeCob = cx.rs.getString("municcob");
                        if (cidadeCob == null) {
                            cli.setCidadeCobranca(null);
                        } else {
                            cli.setCidadeCobranca(cidadeCob
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        System.out.println("Campo29");
                        estadoCob = cx.rs.getString("estadocob");
                        if (estado == null) {
                            cli.setEstadoCobranca(null);
                        } else {
                            cli.setEstadoCobranca(estadoCob
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        System.out.println("Campo30");
                        desconto = cx.rs.getDouble("desconto");
                        if (desconto.equals(0.0)) {
                            cli.setDesconto(0.00);
                        } else {
                            cli.setDesconto(desconto);
                        }
                        System.out.println("Campo31");
                        obs = cx.rs.getString("obs");
                        if (obs == null) {
                            cli.setObservacao("");
                        } else {
                            cli.setObservacao(obs
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        System.out.println("Campo32");
                        msg = cx.rs.getString("mensagem");
                        if (msg == null) {
                            cli.setRestricoes(null);
                        } else {
                            cli.setRestricoes(msg
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        System.out.println("Campo33");
                        cli.setAdminCartaoCredito("");
                        System.out.println("Campo34");
                        cli.setNumeroCartaoCredito("");
                        System.out.println("Campo35");
                        cli.setValidaCartaoCredito("");
                        System.out.println("Campo36");
                        email = cx.rs.getString("email");
                        if (email == null) {
                            cli.setEmail("");
                        } else {
                            cli.setEmail(email.replaceAll("[^A-Za-z0-9\\.\\@_]", ""));
                        }
                        System.out.println("Campo37");
                        dataUltAlt = cx.rs.getDate("ultatu");
                        if (dataUltAlt == null) {
                            cli.setDt_ultimaAlteracao("");
                        } else {
                            dtaUltAlt = df.format(dataUltAlt);
                            cli.setDt_ultimaAlteracao(dtaUltAlt);
                        }
                        System.out.println("Campo38");
                        cli.setCNAE("");
//                        cnae = cx.rs.getString("cnae");
//                        if (cnae == null) {
//                            cli.setCNAE("");
//                        } else {
//                            cli.setCNAE(cnae.replaceAll("[^0-9]", ""));
//                        }
                        System.out.println("Campo39");
                        cli.setSexo("E");
                        System.out.println("Campo40");
                        cli.setTipoResidencia("P");
                        System.out.println("Campo41");
                        cli.setTempoResidencia("");
                        System.out.println("Campo42");
                        cli.setVeiculo("");
                        System.out.println("Campo43");
                        cli.setPontoReferencia("");
                        System.out.println("Campo44");
                        cli.setComprovanteResidencia("N");
                        System.out.println("Campo45");
                        cli.setComprovanteRenda("N");
                        System.out.println("Campo46");
                        cli.setComprovanteRendaConj("N");
                        System.out.println("Campo47");
                        cli.setEmpresaTrabalho("");
                        System.out.println("Campo48");
                        telcom = cx.rs.getString("telcom");
                        if (telcom == null) {
                            cli.setTelefoneTrablho("");
                        } else {
                            cli.setTelefoneTrablho(telcom.replaceAll("[^0-9]", ""));
                        }
                        System.out.println("Campo49");
                        cli.setCargoEmpresa("");
                        System.out.println("Campo50");
                        cli.setTempoEmpresa("");
                        System.out.println("Campo51");
                        cli.setEnderecoEmpresa("");
                        System.out.println("Campo52");
                        cli.setNomeChefeEmpresa("");
                        System.out.println("Campo53");
                        cli.setSalario("0.00");
                        System.out.println("Campo54");
                        cli.setOutrasRendas("");
                        System.out.println("Campo55");
                        cli.setEstadoCivil("O");
                        System.out.println("Campo56");
                        cli.setNomeConjuge("");
                        System.out.println("Campo57");
                        cli.setDtNascConjuge("");
                        System.out.println("Campo58");
                        cli.setNomeEmpresaConjuge("");
                        System.out.println("Campo59");
                        cli.setTelefoneTrabConjuge("");
                        System.out.println("Campo60");
                        cli.setCargoConjuge("");
                        System.out.println("Campo61");
                        cli.setNomeChefeConjuge("");
                        System.out.println("Campo62");
                        cli.setSalarioConjuge("");
                        System.out.println("Campo63");
                        cli.setReferenciaPessoalNome1("");
                        System.out.println("Campo64");
                        telEnt = cx.rs.getString("telent");
                        if (telEnt == null) {
                            cli.setTelefoneReferencia1("");
                        } else {
                            cli.setTelefoneReferencia1(telEnt.replaceAll("[^0-9]", ""));
                        }
                        System.out.println("Campo65");
                        cli.setEnderecoReferencia1("");
                        System.out.println("Campo66");
                        cli.setReferenciaPessoalNome2("");
                        System.out.println("Campo67");
                        cli.setTelefoneReferencia2("");
                        System.out.println("Campo68");
                        cli.setEnderecoReferencia2("");
                        System.out.println("Campo69");
                        cli.setReferenciaComercialNome1("");
                        System.out.println("Campo70");
                        cli.setTelefoneReferenciaComercial1("");
                        System.out.println("Campo71");
                        cli.setReferenciaComercialNome2("");
                        System.out.println("Campo72");
                        cli.setTelefoneReferenciaComercial2("");
                        System.out.println("Campo73");
                        cli.setReferenciaBancaria1("");
                        System.out.println("Campo74");
                        cli.setReferenciaBancariaAgencia1("");
                        System.out.println("Campo75");
                        cli.setReferenciaBancariaConta1("");
                        System.out.println("Campo76");
                        cli.setTipoContaBancaria1("");
                        System.out.println("Campo77");
                        cli.setReferenciaBancaria2("");
                        System.out.println("Campo78");
                        cli.setReferenciaBancariaAgencia2("");
                        System.out.println("Campo79");
                        cli.setReferenciaBancariaConta2("");
                        System.out.println("Campo80");
                        cli.setTipoContaBancaria2("");
                        System.out.println("Campo81");
                        cli.setTicket("");
                        System.out.println("Campo82");
                        cli.setNomeDependente1("");
                        System.out.println("Campo83");
                        cli.setGrauParentesco1("");
                        System.out.println("Campo84");
                        cli.setTelefoneDependete1("");
                        System.out.println("Campo85");
                        cli.setNomeDependente2("");
                        System.out.println("Campo86");
                        cli.setGrauParentesco2("");
                        System.out.println("Campo87");
                        cli.setTelefoneDependete2("");
                        System.out.println("Campo88");
                        cli.setSituacaoSPC("");
                        System.out.println("Campo89");
                        cli.setNomePessoaContatoSPC("");
                        System.out.println("Campo90");
                        cli.setSituacaoTeleCheque("");
                        System.out.println("Campo91");
                        cli.setNomePessoaTeleCheque("");
                        System.out.println("Campo92");
                        if (obs2 == null) {
                            cli.setObservacaoSituacao("");
                        } else {
                            cli.setObservacaoSituacao(obs2
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        System.out.println("Campo93");
                        cli.setSituacaoAprovacaoCad("P");
                        System.out.println("Campo94");
                        cli.setPessoaQueAutorizouCad("");
                        System.out.println("Campo95");
                        cli.setDiaFechamentoFatura("");
                        System.out.println("Campo96");
                        cli.setNaturalidade("");
                        System.out.println("Campo97");
                        cli.setOrgaoExpeditorRG("");
                        System.out.println("Campo98");
                        cli.setTipoPreco("1");
                        System.out.println("Campo99");
                        cli.setRamoAtividade("");
                        System.out.println("Campo100");
                        cli.setComplementoBairro("");
                        System.out.println("Campo101");
                        complementoCob = cx.rs.getString("complecob");
                        if (complementoCob == null) {
                            cli.setComplementoBairroCobranca("");
                        } else {
                            cli.setComplementoBairroCobranca(complementoCob
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        System.out.println("Campo102");
                        cli.setNumeroEnderecoCliente(cx.rs.getInt("numero"));
                        System.out.println("Campo103");
                        cli.setNumeroEnderecoClienteCobranca(cx.rs.getInt("numerocob"));
                        System.out.println("Campo104");
                        complemento = cx.rs.getString("complemen");
                        if (complemento == null) {
                            cli.setComplementoEnderecoCliente("");
                        } else {
                            cli.setComplementoEnderecoCliente(complemento
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        System.out.println("Campo105");
                        if (complementoCob == null) {
                            cli.setComplementoEnderecoClienteCobranca("");
                        } else {
                            cli.setComplementoEnderecoClienteCobranca(complementoCob
                                    .replaceAll("[ÁÀÂÃáàâã]", "A").replaceAll("[ÉÈÊéèê]", "E").replaceAll("[ÍÌÎíìî]", "I")
                                    .replaceAll("[ÓÒÔÕóòôõ]", "O").replaceAll("ÚÙÛúùû", "U").replaceAll("Çç", "C"));
                        }
                        System.out.println("Campo106");
                        cli.setVendedor("");
                        System.out.println("Campo107");
                        cli.setLimite2(cx.rs.getDouble("limitechq"));
                        System.out.println("Campo108");
                        cli.setLimite2Usado(cx.rs.getDouble("saldochq"));
                        System.out.println("Campo109");
                        cli.setCodigoInterno("");
                        System.out.println("Campo110");
                        cli.setVendedor2("");

                        clientes.add(cli);
                    } while (cx.rs.next());
                    logger.debug("Gravando Clientes em arquivo...");
                    new GravaTexto().geraCliente(clientes);
                    logger.debug("Clientes salvo em arquivo com sucesso!");
                    total = 0;
                    regAtual = 0;
                    lbProcesso.setText(null);
                } catch (SQLException ex) {
                    logger.error("Erro no processo do Cliente", ex);
                    JXErrorPane.showDialog(Principal.this,
                            new ErrorInfo("OrionLine Automação Comercial",
                                    "Erro no processo dos Clientes", "<html><center>SQLException: </center><p><b>" + ex.fillInStackTrace() + "<b></p></html>", "Erro", ex, Level.ALL, null));
                }
                cx.desconecta();
                logger.debug("Finalizado o processo do Cliente!");
            }
            if (checkGrupo.isSelected()) {
                JOptionPane.showMessageDialog(null, "Falta Programar o grupo",
                        "OrionLine Automação Comercial",
                        JOptionPane.INFORMATION_MESSAGE);
            }
            if (checkImpFedProd.isSelected()) {
                JOptionPane.showMessageDialog(null, "Falta Programar Impostos Federais do Produto",
                        "OrionLine Automação Comercial",
                        JOptionPane.INFORMATION_MESSAGE);
//                List<ImpostoFederalProduto> impFedProdList = new ArrayList<ImpostoFederalProduto>();
//                cx.conexao();
//                cx2.conexao();
//                cx.executaQuery("select * from estoque");
//                cx2.executaQuery("select count(*) from estoque");
            }
            if (checkImpostoFederal.isSelected()) {
                logger.debug("Processando Impostos Federais...");
                String verificaSai1;
                String verificaSai2;
                String verificaEnt1;
                String verificaEnt2;
                String tributado;
                String subst;
                String AliqZero;
                String sistMonofasico;
                String suspensa;
                cx.conexao();
                cx2.conexao();
                cx.executaQuery("select * from estoque");
                cx2.executaQuery("select count(*) from estoque");
                try {
                    cx.rs.first();
                    cx2.rs.first();
                    total = cx2.rs.getInt(1);
                    cx2.desconecta();
                    lbProcesso.setText("Processando Impostos Federal...");
                    new ProcessarProgresso().start();
                    do {
                        regAtual += 1;

                        verificaSai1 = cx.rs.getString("stpis");
                        verificaSai2 = cx.rs.getString("stcofins");
                        verificaEnt1 = cx.rs.getString("stpisen");
                        verificaEnt2 = cx.rs.getString("stcofinsen");
                        if (verificaSai1 != null) {
                            if (verificaSai1.equals("01")) {
                                impFedArq = new ImpostoFederal();
                            }
                        }
                        System.out.println("Registro: " + regAtual);
                    } while (cx.rs.next());
                } catch (SQLException ex) {
                    logger.error("Erro no processo do Imposto Federal", ex);
                    JXErrorPane.showDialog(Principal.this,
                            new ErrorInfo("OrionLine Automação Comercial",
                                    "Erro no processo do Imposto Federal", "<html><center>SQLException: </center><p><b>" + ex.fillInStackTrace() + "<b></p></html>", "Erro", ex, Level.ALL, null));
                }
                regAtual = 0;
                total = 0;
                cx.desconecta();
                logger.debug("Finalizado processo do Imposto Federal!");
            }
            if (checkContaReceber.isSelected()) {
                logger.debug("Processando Contas Receber...");
                try {
                    File pasta = new File("arquivos");
                    if (!pasta.exists()) {
                        pasta.mkdir();
                    }
                    File arqContas = new File(pasta+"/SYSPCRC.txt");
                    if ( arqContas.exists() ){
                        arqContas.delete();
                    }
                    FileWriter arquivo = new FileWriter(arqContas, true);

                    cx.conexao();
                    cx2.conexao();
                    cx3.conexao();
                    cx4.conexao();

                    cx.executaQuery("select * from contrec");
                    cx2.executaQuery("select count(*) from contrec");
                    //cx3.executaQuery("select * from pagos");
//                    cx4.executaQuery("select count(*) from pagos p inner join contrec c on p.nrdoc = c.nrdoc");
                    try {
                        cx.rs.first();
                        cx2.rs.first();
                        //cx3.rs.first();
//                        cx4.rs.first();
                        total = cx2.rs.getInt(1);
//                        total = total + cx4.rs.getInt(1);
                        cx2.desconecta();
//                        cx4.desconecta();
                        lbProcesso.setText("Processando contas a receber...");
                        new ProcessarProgresso().start();

                        //Variaveis
                        Integer doc;
                        Integer nrdoc;
                        String parcela;
                        DateFormat df = new SimpleDateFormat("ddMMyyyy");
                        df.setLenient(false);

                        Date dataEmissao;
                        Date dataVencimento;
                        Date dataPagamento;

                        String dtaEmissao;
                        String dtaVencimento;
                        String dtaPagamento;

                        Integer codCli;

                        Double valor;
                        Double juros;
                        Double vlRec;

                        String linha1;
                        String linha2;
                        String linha3;
                        
                        Double valorDevido;

                        do {

                            regAtual += 1;
                            System.out.println("Registro atual: " + regAtual);
                            doc = cx.rs.getInt("nrdoc");
                            System.out.println("numero doc: " + doc);
                            System.out.println("é nulo: " + doc.toString().isEmpty());
                            if (doc > 0 && !doc.toString().isEmpty()) {
                                contrecCab = new ContaReceberCabecalho();
                                System.out.println("Campo 01 - Cabeçalho");
                                contrecCab.setTipo("C");
                                System.out.println("Campo 02");
                                contrecCab.setReservado1(0);
                                System.out.println("Campo 03");
                                contrecCab.setReservado2(0);
                                System.out.println("Campo 04");
                                contrecCab.setReservado3(0);
                                System.out.println("Campo 05");
                                contrecCab.setReservado4(0);
                                System.out.println("Campo 06");
                                contrecCab.setTipoJuros("S");
                                System.out.println("Campo 07");
                                contrecCab.setPercentualJuros(0.00);
                                System.out.println("Campo 08");
                                contrecCab.setPercentualMulta(0.00);
                                System.out.println("Campo 09");
                                contrecCab.setPercentualDesconto(0.00);

                                System.out.println("Campo 10 - Criando linha...");
                                linha1 = String.format(Locale.US, "%1s%-4d%-3d%-3d%-3d%1s%3.4f%3.4f%3.4f\n", contrecCab.getTipo(),
                                        contrecCab.getReservado1(), contrecCab.getReservado2(), contrecCab.getReservado3(),
                                        contrecCab.getReservado4(), contrecCab.getTipoJuros(), contrecCab.getPercentualJuros(),
                                        contrecCab.getPercentualMulta(), contrecCab.getPercentualDesconto());
                                System.out.println("Campo 11 - Gravando linha em arquivo");
                                arquivo.write(linha1);
                                System.out.println("Campo 12 - Dando um refresh no arquivo");
                                arquivo.flush();

                                contrecarq = new ContaReceberAberta();
                                System.out.println("Campo 13 - Conta aberts");
                                contrecarq.setTipo("T");
                                System.out.println("Campo 14");
                                contrecarq.setLoja(cx.rs.getInt("loja"));
                                System.out.println("Campo 16");
                                parcela = cx.rs.getString("desdobr");
                                if (Integer.parseInt(parcela) > 1 && !parcela.isEmpty()) {
                                    nrdoc = doc;
                                    contrecarq.setNrDoc(String.valueOf(doc) + "/" + parcela);
                                } else {
                                    nrdoc = doc;
                                    contrecarq.setNrDoc(String.valueOf(doc + "/" + parcela));
                                }
                                System.out.println("Campo 17");
                                vlRec = cx.rs.getDouble("valrec");
                                valor = cx.rs.getDouble("valor");
                                if (vlRec != 0.00) {
                                    contrecarq.setTipoPagamento("P");
                                    valorDevido = valor - vlRec;
                                } else {
                                    contrecarq.setTipoPagamento("A");
                                    valorDevido = valor;
                                }
                                System.out.println("Campo 18");
                                contrecarq.setCodAgente(0000);
                                System.out.println("Campo 19");
                                contrecarq.setCodCliente(cx.rs.getInt("cdcliente"));
                                System.out.println("Campo 20");
                                dataEmissao = cx.rs.getDate("emissao");
                                if (dataEmissao == null) {
                                    contrecarq.setDataEmissao("");
                                } else {
                                    dtaEmissao = df.format(dataEmissao);
                                    contrecarq.setDataEmissao(dtaEmissao);
                                }
                                System.out.println("Campo 21");
                                dataVencimento = cx.rs.getDate("vencto");
                                if (dataVencimento == null) {
                                    dtaVencimento = "";
                                    contrecarq.setDataVencimento(dtaVencimento);
                                } else {
                                    dtaVencimento = df.format(dataVencimento);
                                    contrecarq.setDataVencimento(dtaVencimento);
                                }
                                System.out.println("Campo 22");
                                dataPagamento = cx.rs.getDate("receb");
                                if (dataPagamento == null) {
                                    dtaPagamento = null;
                                    contrecarq.setDataPagamento("");
                                } else {
                                    dtaPagamento = df.format(dataPagamento);
                                    contrecarq.setDataPagamento(dtaPagamento);
                                }
                                System.out.println("Campo 23");
                                contrecarq.setValorNominal(valor);
                                System.out.println("Campo 24");
                                contrecarq.setTotalRecebido(vlRec);
                                System.out.println("Campo 25");
                                contrecarq.setValorDevido(valorDevido);
                                System.out.println("Campo 26");
                                contrecarq.setObservacao(cx.rs.getString("docto"));
                                System.out.println("Campo 27");
                                contrecarq.setCodAuxiliar("");
                                System.out.println("Campo 28");
                                contrecarq.setDataCalculo(dtaVencimento);
                                System.out.println("Campo 29");
                                contrecarq.setSequencial("");
                                System.out.println("Campo 30 - Segunda linha");
                                linha2 = String.format(Locale.US, "%-1s%-4d%-10s%-1s%04d%015d%-8s%-8s%-8s%12.2f%12.2f%12.2f%-45s%-6s%-8s%-6s\n",
                                        contrecarq.getTipo(), contrecarq.getLoja(), contrecarq.getNrDoc(), contrecarq.getTipoPagamento(),
                                        contrecarq.getCodAgente(), contrecarq.getCodCliente(), contrecarq.getDataEmissao(),
                                        contrecarq.getDataVencimento(), contrecarq.getDataPagamento(), contrecarq.getValorNominal(),
                                        contrecarq.getTotalRecebido(), contrecarq.getValorDevido(), contrecarq.getObservacao(),
                                        contrecarq.getCodAuxiliar(), contrecarq.getDataCalculo(), contrecarq.getSequencial());
                                System.out.println("Campo 31 - Gravando segunda linha");
                                arquivo.write(linha2);
                                System.out.println("Campo 32 - Dando um refresh no arquivo");
                                arquivo.flush();
                                if (vlRec != 0.00) {
                                    System.out.println("Campo 33 - Pagamentos parciais");
                                    contrecPag = new ContaReceberPaga();
                                    contrecPag.setTipo("P");
                                    System.out.println("Campo 34");
                                    contrecPag.setDataPagamento(dtaPagamento);
                                    System.out.println("Campo 35");
                                    contrecPag.setValorRecebido(vlRec);
                                    System.out.println("Campo 36");
                                    juros = cx.rs.getDouble("juros");
                                    System.out.println("Campo 37");
                                    contrecPag.setValorJuros(juros);
                                    System.out.println("Campo 38");
                                    contrecPag.setValorMora(cx.rs.getDouble("mora"));
                                    System.out.println("Campo 39");
                                    contrecPag.setValorDesconto(cx.rs.getDouble("desconto"));
                                    System.out.println("Campo 40");
                                    contrecPag.setDiasAtraso(cx.rs.getInt("atraso"));
                                    System.out.println("Campo 41");
                                    contrecPag.setValorNoAtoPagamento(vlRec);
                                    System.out.println("Campo 42");
                                    contrecPag.setSequencial("");
                                    System.out.println("Campo 43 - Preparando linha 3");
                                    linha3 = String.format(Locale.US, "%-1s%-8s%12.2f%12.2f%12.2f%12.2f%-4d%12.2f%-6s\n", contrecPag.getTipo(),
                                            contrecPag.getDataPagamento(), contrecPag.getValorRecebido(), contrecPag.getValorJuros(),
                                            contrecPag.getValorMora(), contrecPag.getValorDesconto(), contrecPag.getDiasAtraso(),
                                            contrecPag.getValorNoAtoPagamento(), contrecPag.getSequencial());
                                    System.out.println("Campo 44 - Gravando linha 3 em arquivo");
                                    arquivo.write(linha3);
                                    System.out.println("Campo 45 - Dando um refresh no arquivo");
                                    arquivo.flush();
                                }
                            }
                        } while (cx.rs.next());
                        cx.desconecta();
                        arquivo.close();
                        total = 0;
                        regAtual = 0;
                        lbProcesso.setText(null);
                        logger.debug("Finalizado Processo do Contas a Receber!");
                    } catch (SQLWarning ex) {
                        logger.error("Erro no Processo do Contas a receber", ex);
                        JXErrorPane.showDialog(Principal.this,
                                new ErrorInfo("OrionLine Automação Comercial",
                                        "Erro no processo do Contas a Receber", "<html><center>SQLWaring: </center><p><b>" + ex.fillInStackTrace() + "<b></p></html>", "Erro", ex, Level.ALL, null));
                    } catch (NumberFormatException ex2) {
                        logger.error("Erro no Processo do Contas a Receber", ex2);
                        JXErrorPane.showDialog(Principal.this,
                                new ErrorInfo("OrionLine Automação Comercial",
                                        "Erro no processo do Contas a Receber", "<html><center>NumberFormatException: </center><p><b>" + ex2.toString() + "<b></p></html>", "Erro", ex2, Level.ALL, null));
                    } catch (SQLException ex) {
                        logger.error("Erro no Processo do Contas a receber", ex);
                        JXErrorPane.showDialog(Principal.this,
                                new ErrorInfo("OrionLine Automação Comercial",
                                        "Erro no processo do Contas a Receber", "<html><center>SQLException </center><p><b>" + ex.fillInStackTrace() + "<b></p></html>", "Erro", ex, Level.ALL, null));
                    }

                } catch (IOException ex) {
                    logger.error("Erro no Processo do Contas a receber", ex);
                    JXErrorPane.showDialog(Principal.this,
                            new ErrorInfo("OrionLine Automação Comercial",
                                    "Erro ao Criar arquivo SYSPCRC.txt", "<html><b>" + ex.fillInStackTrace() + "<b></html>", "Erro", ex, Level.ALL, null));
                    logger.error("Erro ao abrir pasta onde os arquivos foram salvos!", ex);
                }
            }
            JOptionPane.showMessageDialog(null, "Arquivos Salvos com sucesso!", "Informação", JOptionPane.INFORMATION_MESSAGE);
            try {
                int op = JOptionPane.showConfirmDialog(Principal.this,
                        "Deseja abrir pasta onde os arquivos foram salvos?",
                        "Oronline Automação Comercial",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                if (op == 0) {
                    Runtime.getRuntime().exec("explorer " + System.getProperty("user.dir") + "\\arquivos");
                }
            } catch (IOException ex) {
                JXErrorPane.showDialog(Principal.this,
                        new ErrorInfo("OrionLine Automação Comercial",
                                "Erro ao abri pasta", "<html><b>" + ex.fillInStackTrace() + "<b></html>", "Erro", ex, Level.ALL, null));
                logger.error("Erro ao abrir pasta onde os arquivos foram salvos!", ex);
            }
            setCursor(DEFAULT_CURSOR);
            btnExportar.setEnabled(true);
            btnSobre.setEnabled(true);
            btnSair.setEnabled(true);
            checkCodBarras.setEnabled(!false);
            checkEstoque.setEnabled(!false);
            checkFornecedor.setEnabled(!false);
            checkGrupo.setEnabled(!false);
            checkItensFornecedor.setEnabled(!false);
            if ( !checkSecaoGeral.isSelected() ){
                checkSecao.setEnabled(!false);
            }
            checkProdutos.setEnabled(!false);
            checkSubGrupo.setEnabled(!false);
            checkClientes.setEnabled(!false);
            checkContaReceber.setEnabled(!false);
            checkImpFedProd.setEnabled(!false);
            checkTodos.setEnabled(!false);
            checkSecaoGeral.setEnabled(true);
            checkImpostoFederal.setEnabled(!false);

            checkCodBarras.setSelected(!true);
            checkEstoque.setSelected(!true);
            checkFornecedor.setSelected(!true);
            checkGrupo.setSelected(!true);
            checkItensFornecedor.setSelected(!true);
            if ( !checkSecaoGeral.isSelected() ){
                checkProdutos.setSelected(!true);
                checkSecao.setSelected(!true);
            }
            checkSubGrupo.setSelected(!true);
            checkClientes.setSelected(!true);
            checkContaReceber.setSelected(!true);
            checkImpFedProd.setSelected(!true);
            checkImpostoFederal.setSelected(false);
            checkTodos.setSelected(false);
        }
    }
}
